using System;
namespace TSAPILIB2
{
    interface ITSAPI
    {
        APICapsEventReturn getAPICaps();
        APICapsEventReturn getAPICapsComplite(IAsyncResult ar);
        GetDeviceListEventReturn getDeviceList(int index, CSTALevel_t level);
        GetDeviceListEventReturn getDeviceListComplite(IAsyncResult ar);
        QueryAcdSplitEventReturn getQueryAcdSplit(string deviceID);
        QueryAcdSplitEventReturn getQueryAcdSplitComplite(IAsyncResult ar);
        QueryAgentStateEventReturn getQueryAgentState(string deviceID);
        QueryAgentStateEventReturn getQueryAgentStateComplite(IAsyncResult ar);
        QueryDeviceInfoReturn getQueryDeviceInfo(string device);
        IAsyncResult getQueryDeviceInfoAsync(string deviceID, AsyncCallback cb = null);
        QueryDeviceInfoReturn getQueryDeviceInfoComplite(IAsyncResult ar);
        QueryLastNumberEventReturn getQueryLastNumber(string deviceID);
        QueryLastNumberEventReturn getQueryLastNumberComplite(IAsyncResult ar);
        QueryMsgWaitingEventReturn getQueryMsgWaitingInd(string deviceID);
        QueryMsgWaitingEventReturn getQueryMsgWaitingIndComplite(IAsyncResult ar);
        QueryStationStatusEventReturn getQueryStationStatus(string deviceID);
        QueryStationStatusEventReturn getQueryStationStatusComplite(IAsyncResult ar);
        QueryUCIDEventReturn getQueryUCID(ConnectionID_t call);
        QueryUCIDEventReturn getQueryUCIDComplite(IAsyncResult ar);
        event TSAPI.delegateClosed OnClosed;
        event TSAPI.delegateConnected OnConnnected;
        event TSAPI.delegateUniversalFailureSys OnUniversalFailureSys;
        void setAgentState(string deviceID, string agentID, string agentGroup, string password, AgentMode_t mode, ATTWorkMode_t wmode, int reasonCode);
        void setAgentStateComplite(IAsyncResult ar);
        void setAlternateCall(ConnectionID_t activeCall, ConnectionID_t otherCall);
        void setAlternateCallComplite(IAsyncResult ar);
        void setAnswerCall(ConnectionID_t allertingCall);
        void setAnswerCallComplite(IAsyncResult ar);
        void setCallCompletion(ConnectionID_t call, Feature_t feature);
        void setCallCompletionComplite(IAsyncResult ar);
        ChangeMonitorFilterEventReturn setChangeMonitorFilter(int monitorCrossId, CSTAMonitorFilter_t filter);
        ChangeMonitorFilterEventReturn setChangeMonitorFilterComplite(IAsyncResult ar);
        void setClearCall(ConnectionID_t call);
        void setClearCallComplite(IAsyncResult ar);
        void setClearConnection(ConnectionID_t call, ATTDropResource_t resourse, ATTV5UserToUserInfo_t info);
        void setClearConnectionComplite(IAsyncResult ar);
        ConferenceCallEventReturn setConferenceCall(ConnectionID_t activeCall, ConnectionID_t otherCall);
        ConferenceCallEventReturn setConferenceCallComplite(IAsyncResult ar);
        ConsultationCallEventReturn setConsultationCall(ConnectionID_t activeCall, string calledDevice, string destRoute, bool priorityCalling, ATTV5UserToUserInfo_t info);
        ConsultationCallEventReturn setConsultationCallComplite(IAsyncResult ar);
        void setDeflectCall(ConnectionID_t deflectCall, string calledDevice);
        void setDeflectCallComplite(IAsyncResult ar);
        void setGroupPickupCall(ConnectionID_t deflectCall, string pickupDevice);
        void setGroupPickupCallComplite(IAsyncResult ar);
        void setHoldCall(ConnectionID_t activeCall);
        void setHoldCallComplite(IAsyncResult ar);
        MakeCallEventReturn setMakeCall(string callingDevice, string calledDevice, string destroute, bool priorityCall, ATTV5UserToUserInfo_t info);
        MakeCallEventReturn setMakeCallComplite(IAsyncResult ar);
        MakePredictiveCallEventReturn setMakePredictiveCall(string callingDevice, string calledDevice, AllocationState_t allocationState, string destRoute, bool priorityCalling, short maxRing, ATTAnswerTreat_t answerTreat, ATTV5UserToUserInfo_t info);
        MakePredictiveCallEventReturn setMakePredictiveCallComplite(IAsyncResult ar);
        SetupMonitorEventReturn setMonitorCall(ConnectionID_t call, CSTAMonitorFilter_t filter, eventMonitor evnt);
        SetupMonitorEventReturn setMonitorCallComplite(IAsyncResult ar);
        SetupMonitorEventReturn setMonitorCallsViaDevice(string deviceID, CSTAMonitorFilter_t filter, eventMonitor evnt);
        SetupMonitorEventReturn setMonitorCallsViaDeviceComplite(IAsyncResult ar);
        SetupMonitorEventReturn setMonitorDevice(string deviceID, CSTAMonitorFilter_t filter, eventMonitor evnt);
        SetupMonitorEventReturn setMonitorDeviceComplite(IAsyncResult ar);
        StopMonitorEventReturn setMonitorStop(int monitorCrossId);
        StopMonitorEventReturn setMonitorStopComplite(IAsyncResult ar);
        void setPickupCall(ConnectionID_t deflectCall, string calledDevice);
        void setPickupCallComplite(IAsyncResult ar);
        QueryCallMonitorEventReturn setQueryCallMonitor(string deviceID);
        QueryCallMonitorEventReturn setQueryCallMonitorComplite(IAsyncResult ar);
        void setReconnectCall(ConnectionID_t activeCall, ConnectionID_t heldCall, ATTDropResource_t resource, ATTV5UserToUserInfo_t info);
        void setReconnectCallComplite(IAsyncResult ar);
        void setRetrieveCall(ConnectionID_t heldCall);
        void setRetrieveCallComplite(IAsyncResult ar);
        void setSendDTMFTone(ConnectionID_t call, ATTConnIDList_t list, string tone, short toneDuartion, short pauseDuartion);
        void setSendDTMFToneComplite(IAsyncResult ar);
        void setSetMsgWaitingInd(string deviceID, bool messages);
        void setSetMsgWaitingIndComplite(IAsyncResult ar);
        SnapshotCallEventReturn setSnapshotCallReq(ConnectionID_t call);
        SnapshotCallEventReturn setSnapshotCallReqComplite(IAsyncResult ar);
        SnapshotDeviceEventReturn setSnapshotDeviceReq(string deviceID);
        SnapshotDeviceEventReturn setSnapshotDeviceReqComplite(IAsyncResult ar);
        TransferCallEventReturn setTransferCall(ConnectionID_t activeCall, ConnectionID_t heldCall);
        TransferCallEventReturn setTransferCallComplite(IAsyncResult ar);
    }
}
